<?xml version="1.0"?>
<robot name="macroed" xmlns:xacro="http://ros.org/wiki/xacro">

  	<xacro:property name="pi" value="3.1415" />
	<xacro:property name="chassis_length" value="0.4" />
	<xacro:property name="chassis_width" value="0.2" />
	<xacro:property name="chassis_height" value="0.05" />
	<xacro:property name="wheel_radius" value="0.075" />
	<xacro:property name="wheel_length" value="0.02" />


  <material name="blue">
    <color rgba="0 0 0.8 1"/>
  </material>

  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>

  <material name="white">
    <color rgba="1 1 1 1"/>e
  </material>

  <xacro:macro name="default_inertial" params="mass">
    <inertial>
      <mass value="${mass}" />
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params ="m r h">
    <inertial>
     <mass value="${m}"/>
     <inertia ixx="${m*(3*r*r+h*h)/12}"  ixy="0.0" ixz="0.0"
              iyy="${m*(3*r*r+h*h)/12}"  iyz= "0.0"
              izz="${m*r*r/2}"/>
     </inertial>
  </xacro:macro>

  <link name="base_link">
    <visual>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </collision>
    <xacro:default_inertial mass="10.0"/>
  </link>
<gazebo reference="base_link">
    <turnGravityOff>false</turnGravityOff>
	<material>Gazebo/Black</material>
  </gazebo>

  <xacro:macro name="wheel" params="prefix suffix X Y">

    <link name="${prefix}_${suffix}_wheel">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_length}"/>
        </geometry>
        <material name="white"/>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_length}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="2.0" r="${wheel_radius}" h="${wheel_length}"/>
    </link>

    <gazebo reference ="${prefix}_${suffix}_wheel">
      <mu1 value="200.0"/>
      <mu2 value="100.0"/>
      <kp value="10000000.0"/>
      <kd value= "1.0"/>
      <material>Gazebo/White</material>
      <turnGravityOff>false</turnGravityOff>
    </gazebo> 

    <joint name="${prefix}_${suffix}_wheel_joint" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${prefix}_${suffix}_wheel"/>
      <origin xyz="${X*(chassis_length/4)} ${Y*((chassis_width/2)+(wheel_length/2))} 0" rpy="0 0 0"/>
      <limit effort= "100" velocity="100"/>
      <dynamics damping="0.0" friction="0.0"/> 
    </joint>

    <transmission name="${prefix}_${suffix}_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <actuator name="${prefix}_${suffix}_wheel_motor">
	<hardwareInterface>EffortJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
      <joint name="${prefix}_${suffix}_wheel_joint">
        <hardwareInterface>VelocityJointInterface</hardwareInterface>
      </joint>
    </transmission>


  </xacro:macro>

<xacro:wheel prefix="right" suffix="front" X="1" Y="-1"/>
<xacro:wheel prefix="right" suffix="back" X="-1" Y="-1" />
<xacro:wheel prefix="left" suffix="front" X="1" Y="1" />
<xacro:wheel prefix="left" suffix="back" X="-1" Y="1"/>

<link name="camera_link">
  <visual>
    <origin xyz="0 0 0" rpy="0 0 0"/>
   <geometry>
     <box size="0.05 0.05 0.05"/>
   </geometry>
   <material name="white"/>
   </visual>
 </link>

<joint name="camera_joint" type="fixed">
  <origin xyz="0.2 0 0.05" rpy="0 0 0"/>
  <parent link="base_link"/>
  <child link="camera_link"/>
</joint>

 <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>rrbot/camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

 <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/</robotNamespace>
    <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
    <legacyModeNS>true</legacyModeNS>
    </plugin>
  </gazebo>




</robot>
